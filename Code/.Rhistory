trainIndex = 1
testIndex = 2
obj1Train = trainTestList[[trainIndex]]
obj1Test = trainTestList[[testIndex]]
linearModel = lm(Life.expectancy ~., data = obj1Train)
#Model Stats
summary(linearModel)
#Analysis V 2
variablesWithHighNa = c("Total.expenditure", "Schooling", "Population", "Income.composition.of.resources",
"Hepatitis.B", "GDP", "Alcohol", "Country") #More than 5%
LifeExpecObj1Clean = LifeExpecRaw %>% select(-variablesWithHighNa)
LifeExpecObj1Clean$Status = as.factor(LifeExpecObj1Clean$Status)
LifeExpecObj1Clean = LifeExpecObj1Clean %>% filter(!is.na(Life.expectancy))
LifeExpecObj1Clean = LifeExpecObj1Clean %>% filter(!is.na(BMI))
LifeExpecObj1Clean = LifeExpecObj1Clean %>% filter(!is.na(Adult.Mortality))
LifeExpecObj1Clean = LifeExpecObj1Clean %>% filter(!is.na(Diphtheria))
LifeExpecObj1Clean = LifeExpecObj1Clean %>% filter(!is.na(Polio))
LifeExpecObj1Clean = LifeExpecObj1Clean %>% filter(!is.na(thinness..1.19.years))
LifeExpecObj1Clean = LifeExpecObj1Clean %>% filter(!is.na(thinness.5.9.years))
LifeExpecObj1Clean %>%
summarise(across(everything(), ~ sum(is.na(.x)))/2938*100) %>%
gather(Column, NA_Count) %>%
ggplot(aes(x=NA_Count, y=Column, fill = Column)) + geom_col() + ylab("Feature") + xlab("Na Value Percent")
splitPercent = 0.85
trainTestList = get_train_test_list(LifeExpecObj1Clean, splitPercent)
trainIndex = 1
testIndex = 2
obj1Train = trainTestList[[trainIndex]]
obj1Test = trainTestList[[testIndex]]
linearModel = lm(Life.expectancy ~., data = obj1Train)
#Model Stats
summary(linearModel)
#Model Stats
summary(linearModel)
#Assumption Check
par(mfrow=c(2,2))
plot(linearModel)
#ggpairs(obj1Train)
par(mfrow=c(1,1))
vif(linearModel)^2
#Model Performance Stats: RMSE
obj1Test$Predictions = predict(linearModel, obj1Test)
obj1Test$Residuals = obj1Test$Predictions - obj1Test$Life.expectancy
obj1Test$SquaredResiduals = obj1Test$Residuals^2
mse = mean(obj1Test$SquaredResiduals)
rmse = sqrt(mse)
rmse
AIC(linearModel)
variablesWithNa = c("Total.expenditure", "Schooling", "Population", "Income.composition.of.resources",
"Hepatitis.B", "GDP", "Alcohol", "thinness.5.9.years", "thinness..1.19.years",
"Polio", "Diphtheria", "Adult.Mortality","Country", "BMI")
LifeExpecObj1Clean1 = LifeExpecRaw %>% select(-variablesWithNa)
LifeExpecObj1Clean1$Status = as.factor(LifeExpecObj1Clean1$Status)
LifeExpecObj1Clean1 = LifeExpecObj1Clean1 %>% filter(!is.na(Life.expectancy))
LifeExpecObj1Clean1 %>%
summarise(across(everything(), ~ sum(is.na(.x)))/2938*100) %>%
gather(Column, NA_Count) %>%
ggplot(aes(x=NA_Count, y=Column, fill = Column)) + geom_col() + ylab("Feature") + xlab("Na Value Percent")
splitPercent = 0.85
trainTestList = get_train_test_list(LifeExpecObj1Clean1, splitPercent)
trainIndex = 1
testIndex = 2
obj1Train1 = trainTestList[[trainIndex]]
obj1Test1 = trainTestList[[testIndex]]
linearModel1 = lm(Life.expectancy ~., data = obj1Train1)
#Model Stats
summary(linearModel1)
#Assumption Check
par(mfrow=c(2,2))
plot(linearModel1)
#ggpairs(obj1Train)
par(mfrow=c(1,1))
vif(linearModel1)^2
#Model Performance Stats: RMSE
obj1Test1$Predictions = predict(linearModel1, obj1Test1)
obj1Test1$Residuals = obj1Test1$Predictions - obj1Test1$Life.expectancy
obj1Test1$SquaredResiduals = obj1Test1$Residuals^2
mse = mean(obj1Test1$SquaredResiduals)
rmse = sqrt(mse)
rmse
AIC(linearModel1)
plot(vif(linearModel1)^2)
vif(linearModel1)^2
#Model Performance Stats: RMSE
obj1Test1$Predictions = predict(linearModel1, obj1Test1)
obj1Test1$Residuals = obj1Test1$Predictions - obj1Test1$Life.expectancy
obj1Test1$SquaredResiduals = obj1Test1$Residuals^2
mse = mean(obj1Test1$SquaredResiduals)
rmse = sqrt(mse)
rmse
AIC(linearModel1)
#Analysis V 2
variablesWithHighNa = c("Total.expenditure", "Schooling", "Population", "Income.composition.of.resources",
"Hepatitis.B", "GDP", "Alcohol", "Country") #More than 5%
LifeExpecObj1Clean2 = LifeExpecRaw %>% select(-variablesWithHighNa)
LifeExpecObj1Clean2$Status = as.factor(LifeExpecObj1Clean2$Status)
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(Life.expectancy))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(BMI))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(Adult.Mortality))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(Diphtheria))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(Polio))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(thinness..1.19.years))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(thinness.5.9.years))
LifeExpecObj1Clean2 %>%
summarise(across(everything(), ~ sum(is.na(.x)))/2938*100) %>%
gather(Column, NA_Count) %>%
ggplot(aes(x=NA_Count, y=Column, fill = Column)) + geom_col() + ylab("Feature") + xlab("Na Value Percent")
splitPercent = 0.85
trainTestList = get_train_test_list(LifeExpecObj1Clean2, splitPercent)
trainIndex = 1
testIndex = 2
obj1Train2 = trainTestList[[trainIndex]]
obj1Test2 = trainTestList[[testIndex]]
linearModel2 = lm(Life.expectancy ~., data = obj1Train2)
#Model Stats
summary(linearModel2)
#Assumption Check
par(mfrow=c(2,2))
plot(linearModel2)
#ggpairs(obj1Train)
par(mfrow=c(1,1))
vif(linearModel2)^2
#Model Performance Stats: RMSE
obj1Test2$Predictions = predict(linearModel2, obj1Test2)
obj1Test2$Residuals = obj1Test2$Predictions - obj1Test2$Life.expectancy
obj1Test2$SquaredResiduals = obj1Test2$Residuals^2
mse = mean(obj1Test2$SquaredResiduals)
rmse = sqrt(mse)
rmse
AIC(linearModel2)
objTrain2Features = objTrain2 %>% select(-target)
library(glmnet)
obj1Train2Features = obj1Train2 %>% select(-target)
target = c("Life.expectancy")
obj1Train2Features = obj1Train2 %>% select(-target)
obj1Train2Features = model.matrix(Life.expectancy~.,obj1Train2Features)[,-1]
obj1Train2Features = model.matrix(Life.expectancy~.,obj1Train2Features)[,-1]
obj1Train2Features = obj1Train2
obj1Train2Features = model.matrix(Life.expectancy~.,obj1Train2Features)[,-1]
obj1Train2Target = obj1Train2 %>% select(target)
obj1Test2Features = obj1Test2
obj1Test2Features = model.matrix(Life.expectancy~.,obj1Test2Features)[,-1]
obj1Test2Target = obj1Test2 %>% select(target)
grid=10^seq(10,-2, length =100)
lasso.mod=glmnet(objTrain2Features,objTrain2Target,alpha=1, lambda =grid)
lasso.mod=glmnet(obj1Train2Features,objTrain2Target,alpha=1, lambda =grid)
lasso.mod=glmnet(obj1Train2Features,obj1Train2Target,alpha=1, lambda =grid)
cv.out=cv.glmnet(obj1Train2Features,obj1Train2Target,alpha=1) #alpha=1 performs LASSO
plot(cv.out)
str(LifeExpecObj1Clean2)
#Analysis V 2
variablesWithHighNa = c("Total.expenditure", "Schooling", "Population", "Income.composition.of.resources",
"Hepatitis.B", "GDP", "Alcohol", "Country") #More than 5%
LifeExpecObj1Clean2 = LifeExpecRaw %>% select(-variablesWithHighNa)
LifeExpecObj1Clean2$Status = as.factor(LifeExpecObj1Clean2$Status)
str(LifeExpecObj1Clean2)
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(Life.expectancy))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(BMI))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(Adult.Mortality))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(Diphtheria))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(Polio))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(thinness..1.19.years))
LifeExpecObj1Clean2 = LifeExpecObj1Clean2 %>% filter(!is.na(thinness.5.9.years))
LifeExpecObj1Clean2$Year = as.numeric(LifeExpecObj1Clean2$Year)
LifeExpecObj1Clean2$Adult.Mortality = as.numeric(LifeExpecObj1Clean2$Adult.Mortality)
LifeExpecObj1Clean2$infant.deaths = as.numeric(LifeExpecObj1Clean2$infant.deaths)
LifeExpecObj1Clean2$Measles = as.numeric(LifeExpecObj1Clean2$Measles)
LifeExpecObj1Clean2$under.five.deaths = as.numeric(LifeExpecObj1Clean2$under.five.deaths)
LifeExpecObj1Clean2$Polio = as.numeric(LifeExpecObj1Clean2$Polio)
LifeExpecObj1Clean2$Diphtheria = as.numeric(LifeExpecObj1Clean2$Diphtheria)
splitPercent = 0.85
trainTestList = get_train_test_list(LifeExpecObj1Clean2, splitPercent)
trainIndex = 1
testIndex = 2
obj1Train2 = trainTestList[[trainIndex]]
obj1Test2 = trainTestList[[testIndex]]
linearModel2 = lm(Life.expectancy ~., data = obj1Train2)
#Model Stats
summary(linearModel2)
#Assumption Check
par(mfrow=c(2,2))
plot(linearModel2)
#ggpairs(obj1Train)
par(mfrow=c(1,1))
vif(linearModel2)^2
#Model Performance Stats: RMSE
obj1Test2$Predictions = predict(linearModel2, obj1Test2)
obj1Test2$Residuals = obj1Test2$Predictions - obj1Test2$Life.expectancy
obj1Test2$SquaredResiduals = obj1Test2$Residuals^2
mse = mean(obj1Test2$SquaredResiduals)
rmse = sqrt(mse)
rmse
AIC(linearModel2)
#Lasso
target = c("Life.expectancy")
obj1Train2Features = obj1Train2
obj1Train2Features = model.matrix(Life.expectancy~.,obj1Train2Features)[,-1]
obj1Train2Target = obj1Train2 %>% select(target)
obj1Test2Features = obj1Test2
obj1Test2Features = model.matrix(Life.expectancy~.,obj1Test2Features)[,-1]
obj1Test2Target = obj1Test2 %>% select(target)
grid=10^seq(10,-2, length =100)
lasso.mod=glmnet(obj1Train2Features,obj1Train2Target,alpha=1, lambda =grid)
obj1Test2Target
grid=10^seq(10,-2, length =100)
lasso.mod=glmnet(obj1Train2Features,obj1Train2Target,alpha=1, lambda =grid)
typeof(obj1Test2Target)
#Lasso
target = c("Life.expectancy")
obj1Train2Features = obj1Train2
obj1Train2Features = model.matrix(Life.expectancy~.,obj1Train2Features)[,-1]
obj1Train2Target = data.frame(obj1Train2 %>% select(target))
obj1Test2Features = obj1Test2
obj1Test2Features = model.matrix(Life.expectancy~.,obj1Test2Features)[,-1]
obj1Test2Target = data.frame(obj1Test2 %>% select(target))
grid=10^seq(10,-2, length =100)
lasso.mod=glmnet(obj1Train2Features,obj1Train2Target,alpha=1, lambda =grid)
typeof(obj1Test2Target)
obj1Test2Target = data.frame(obj1Test2 %>% select(target))
obj1Test2Target = data.frame(Life.expectancy = obj1Test2 %>% select(target))
typeof(obj1Test2Target)
typeof(obj1Test2Features)
typeof(obj1Test2)
head(obj1Test2)
obj1Test2Target = obj1Test2 %>% select(target))
typeof(obj1Test2)
typeof(obj1Train2)
typeof(LifeExpecRaw)
obj1Train2Features = obj1Train2
obj1Train2Features = model.matrix(Life.expectancy~.,obj1Train2Features)[,-1]
obj1Train2Target = obj1Train2 %>% select(target)
obj1Test2Features = obj1Test2
obj1Test2Features = model.matrix(Life.expectancy~.,obj1Test2Features)[,-1]
obj1Test2Target = obj1Test2 %>% select(target)
grid=10^seq(10,-2, length =100)
lasso.mod=glmnet(obj1Train2Features,obj1Train2Target,alpha=1, lambda =grid)
?glmnet
obj1Train2$Life.expectancy
obj1Train2Features = obj1Train2
obj1Train2Features = model.matrix(Life.expectancy~.,obj1Train2Features)[,-1]
obj1Train2Target = obj1Train2$Life.expectancy
obj1Test2Features = obj1Test2
obj1Test2Features = model.matrix(Life.expectancy~.,obj1Test2Features)[,-1]
obj1Test2Target = obj1Test2$Life.expectancy
grid=10^seq(10,-2, length =100)
lasso.mod=glmnet(obj1Train2Features,obj1Train2Target,alpha=1, lambda =grid)
cv.out=cv.glmnet(obj1Train2Features,obj1Train2Target,alpha=1) #alpha=1 performs LASSO
plot(cv.out)
bestlambda<-cv.out$lambda.min  #Optimal penalty parameter.  You can make this call visually.
lasso.pred=predict (lasso.mod ,s=bestlambda ,newx=xtest)
bestlambda<-cv.out$lambda.min
bestlambda<-cv.out$lambda.min
lasso.pred=predict (lasso.mod ,s=bestlambda ,newx=obj1Test2Features)
str(obj1Train2Features)
str(obj1Test2Features)
str(obj1Train2)
str(obj1Test2)
obj1Test2Features = obj1Test2 %>% select(-modelPerformanceStats)
modelPerformanceStats = c("Predictions", "Residuals", "SquaredResiduals")
obj1Test2Features = obj1Test2 %>% select(-modelPerformanceStats)
obj1Test2Features = model.matrix(Life.expectancy~.,obj1Test2Features)[,-1]
obj1Test2Target = obj1Test2$Life.expectancy
grid=10^seq(10,-2, length =100)
lasso.mod=glmnet(obj1Train2Features,obj1Train2Target,alpha=1, lambda =grid)
cv.out=cv.glmnet(obj1Train2Features,obj1Train2Target,alpha=1) #alpha=1 performs LASSO
plot(cv.out)
bestlambda<-cv.out$lambda.min
lasso.pred=predict (lasso.mod ,s=bestlambda ,newx=obj1Test2Features)
testMSE_LASSO<-mean((obj1Test2Target-lasso.pred)^2)
testMSE_LASSO
coef(lasso.mod,s=bestlambda)
vif(linearModel1)^2
#Model Stats
summary(linearModel2)
plot(linearModel1)
plot(linearModel1)
#Model Stats
summary(linearModel1)
secondModelVars = c("Year", "StatusDeveloping", "under.five.deaths", "percentage.expenditure",
"HIV.AIDS", "Life.expectancy")
LifeExpecObj1Clean2 = LifeExpecObj1Clean1 %>% select(secondModelVars)
secondModelVars = c("Year", "Status", "under.five.deaths", "percentage.expenditure",
"HIV.AIDS", "Life.expectancy")
LifeExpecObj1Clean2 = LifeExpecObj1Clean1 %>% select(secondModelVars)
rmse1
rmse1 = sqrt(mse)
rmse1
AIC(linearModel1)
#Second Model
secondModelVars = c("Year", "Status", "under.five.deaths", "percentage.expenditure",
"HIV.AIDS", "Life.expectancy")
LifeExpecObj1Clean2 = LifeExpecObj1Clean1 %>% select(secondModelVars)
splitPercent = 0.85
trainTestList = get_train_test_list(LifeExpecObj1Clean2, splitPercent)
trainIndex = 1
testIndex = 2
obj1Train2 = trainTestList[[trainIndex]]
obj1Test2 = trainTestList[[testIndex]]
linearModel2 = lm(Life.expectancy ~., data = obj1Train2)
#Model Stats
summary(linearModel2)
#Assumption Check
par(mfrow=c(2,2))
plot(linearModel2)
#ggpairs(obj1Train)
par(mfrow=c(1,1))
vif(linearModel2)^2
#Model Performance Stats: RMSE
obj1Test2$Predictions = predict(linearModel2, obj1Test2)
obj1Test2$Residuals = obj1Test2$Predictions - obj1Test2$Life.expectancy
obj1Test2$SquaredResiduals = obj1Test2$Residuals^2
mse = mean(obj1Test2$SquaredResiduals)
rmse2 = sqrt(mse)
rmse2
AIC(linearModel1)
AIC(linearModel2)
#Second Model
secondModelVars = c("Year", "Status", "under.five.deaths", "percentage.expenditure",
"HIV.AIDS", "Life.expectancy")
obj1Train2 = obj1Train1 %>% select(secondModelVars)
obj1Test2 = obj1Test1 %>% select(secondModelVars)
linearModel2 = lm(Life.expectancy ~., data = obj1Train2)
#Model Stats
summary(linearModel2)
#Model Performance Stats: RMSE
obj1Test2$Predictions = predict(linearModel2, obj1Test2)
obj1Test2$Residuals = obj1Test2$Predictions - obj1Test2$Life.expectancy
obj1Test2$SquaredResiduals = obj1Test2$Residuals^2
mse = mean(obj1Test2$SquaredResiduals)
rmse2 = sqrt(mse)
rmse2
AIC(linearModel2)
rmse1
AIC(linearModel1)
variablesWithNa = c("Total.expenditure", "Schooling", "Population", "Income.composition.of.resources",
"Hepatitis.B", "GDP", "Alcohol", "thinness.5.9.years", "thinness..1.19.years",
"Polio", "Diphtheria", "Adult.Mortality","Country", "BMI")
LifeExpecObj1Clean1 = LifeExpecRaw %>% select(-variablesWithNa)
LifeExpecObj1Clean1$Status = as.factor(LifeExpecObj1Clean1$Status)
LifeExpecObj1Clean1 = LifeExpecObj1Clean1 %>% filter(!is.na(Life.expectancy))
LifeExpecObj1Clean1 %>%
summarise(across(everything(), ~ sum(is.na(.x)))/2938*100) %>%
gather(Column, NA_Count) %>%
ggplot(aes(x=NA_Count, y=Column, fill = Column)) + geom_col() + ylab("Feature") + xlab("Na Value Percent")
splitPercent = 0.85
trainTestList = get_train_test_list(LifeExpecObj1Clean1, splitPercent)
trainIndex = 1
testIndex = 2
obj1Train1 = trainTestList[[trainIndex]]
obj1Test1 = trainTestList[[testIndex]]
linearModel1 = lm(Life.expectancy ~., data = obj1Train1)
#Model Stats
summary(linearModel1)
#Assumption Check
par(mfrow=c(2,2))
plot(linearModel1)
#ggpairs(obj1Train)
par(mfrow=c(1,1))
vif(linearModel1)^2 #infant.deaths and under.five.deaths highly correlated. Next model remove one
#Model Performance Stats: RMSE
obj1Test1$Predictions = predict(linearModel1, obj1Test1)
obj1Test1$Residuals = obj1Test1$Predictions - obj1Test1$Life.expectancy
obj1Test1$SquaredResiduals = obj1Test1$Residuals^2
mse = mean(obj1Test1$SquaredResiduals)
rmse1 = sqrt(mse)
rmse1
AIC(linearModel1)
#Second Model
secondModelVars = c("Year", "Status", "under.five.deaths", "percentage.expenditure",
"HIV.AIDS", "Life.expectancy")
obj1Train2 = obj1Train1 %>% select(secondModelVars)
obj1Test2 = obj1Test1 %>% select(secondModelVars)
linearModel2 = lm(Life.expectancy ~., data = obj1Train2)
#Model Performance Stats: RMSE
obj1Test2$Predictions = predict(linearModel2, obj1Test2)
obj1Test2$Residuals = obj1Test2$Predictions - obj1Test2$Life.expectancy
obj1Test2$SquaredResiduals = obj1Test2$Residuals^2
mse = mean(obj1Test2$SquaredResiduals)
rmse2 = sqrt(mse)
rmse2
AIC(linearModel2)
#Second Model
secondModelVars = c("Year", "Status", "infant.deaths", "percentage.expenditure",
"HIV.AIDS", "Life.expectancy")
obj1Train2 = obj1Train1 %>% select(secondModelVars)
obj1Test2 = obj1Test1 %>% select(secondModelVars)
linearModel2 = lm(Life.expectancy ~., data = obj1Train2)
rmse2 = sqrt(mse)
#Model Performance Stats: RMSE
obj1Test2$Predictions = predict(linearModel2, obj1Test2)
obj1Test2$Residuals = obj1Test2$Predictions - obj1Test2$Life.expectancy
obj1Test2$SquaredResiduals = obj1Test2$Residuals^2
mse = mean(obj1Test2$SquaredResiduals)
rmse2 = sqrt(mse)
rmse2
AIC(linearModel2)
#Second Model
secondModelVars = c("Year", "Status", "under.five.deaths", "percentage.expenditure",
"HIV.AIDS", "Life.expectancy")
obj1Train2 = obj1Train1 %>% select(secondModelVars)
obj1Test2 = obj1Test1 %>% select(secondModelVars)
linearModel2 = lm(Life.expectancy ~., data = obj1Train2)
#Model Stats
summary(linearModel2)
#Model Stats
summary(linearModel1)
#Second Model
secondModelVars = c("Year", "Status", "under.five.deaths", "percentage.expenditure",
"HIV.AIDS", "Life.expectancy", "infant.deaths")
obj1Train2 = obj1Train1 %>% select(secondModelVars)
obj1Test2 = obj1Test1 %>% select(secondModelVars)
linearModel2 = lm(Life.expectancy ~., data = obj1Train2)
#Model Performance Stats: RMSE
obj1Test2$Predictions = predict(linearModel2, obj1Test2)
obj1Test2$Residuals = obj1Test2$Predictions - obj1Test2$Life.expectancy
obj1Test2$SquaredResiduals = obj1Test2$Residuals^2
mse = mean(obj1Test2$SquaredResiduals)
rmse2 = sqrt(mse)
rmse2
AIC(linearModel2)
rmse1
AIC(linearModel1)
modelIterations = 500
rmseModel1 = 0
rmseModel2 = 0
aicModel1 = 0
aicModel2 = 0
for(i in 1:modelIterations){
#Train Test Setup
splitPercent = 0.85
trainTestList = get_train_test_list(LifeExpecObj1Clean1, splitPercent)
trainIndex = 1
testIndex = 2
obj1Train1 = trainTestList[[trainIndex]]
obj1Test1 = trainTestList[[testIndex]]
secondModelVars = c("Year", "Status", "under.five.deaths", "percentage.expenditure",
"HIV.AIDS", "Life.expectancy", "infant.deaths")
obj1Train2 = obj1Train1 %>% select(secondModelVars)
obj1Test2 = obj1Test1 %>% select(secondModelVars)
#Models
linearModel1 = lm(Life.expectancy ~., data = obj1Train1)
linearModel2 = lm(Life.expectancy ~., data = obj1Train2)
#Get RMSE
obj1Test1$Predictions = predict(linearModel1, obj1Test1)
obj1Test1$Residuals = obj1Test1$Predictions - obj1Test1$Life.expectancy
obj1Test1$SquaredResiduals = obj1Test1$Residuals^2
mse = mean(obj1Test1$SquaredResiduals)
rmse1 = sqrt(mse)
rmseModel1 = rmseModel1+rmse1
obj1Test2$Predictions = predict(linearModel2, obj1Test2)
obj1Test2$Residuals = obj1Test2$Predictions - obj1Test2$Life.expectancy
obj1Test2$SquaredResiduals = obj1Test2$Residuals^2
mse = mean(obj1Test2$SquaredResiduals)
rmse2 = sqrt(mse)
rmseModel2 = rmseModel2+rmse2
#Get AIC
aicModel1 = aicModel1 + AIC(linearModel1)
aicModel2 = aicModel2 + AIC(linearModel2)
}
rmseModel1 = rmseModel1/modelIterations
rmseModel2 = rmseModel2/modelIterations
aicModel1 = aicModel1/modelIterations
aicModel2 = aicModel2/modelIterations
rmseModel1
rmseModel2
aicModel1
aicModel2
modelIterations = 5000
rmseModel1 = 0
rmseModel2 = 0
aicModel1 = 0
aicModel2 = 0
for(i in 1:modelIterations){
#Train Test Setup
splitPercent = 0.85
trainTestList = get_train_test_list(LifeExpecObj1Clean1, splitPercent)
trainIndex = 1
testIndex = 2
obj1Train1 = trainTestList[[trainIndex]]
obj1Test1 = trainTestList[[testIndex]]
secondModelVars = c("Year", "Status", "under.five.deaths", "percentage.expenditure",
"HIV.AIDS", "Life.expectancy", "infant.deaths")
obj1Train2 = obj1Train1 %>% select(secondModelVars)
obj1Test2 = obj1Test1 %>% select(secondModelVars)
#Models
linearModel1 = lm(Life.expectancy ~., data = obj1Train1)
linearModel2 = lm(Life.expectancy ~., data = obj1Train2)
#Get RMSE
obj1Test1$Predictions = predict(linearModel1, obj1Test1)
obj1Test1$Residuals = obj1Test1$Predictions - obj1Test1$Life.expectancy
obj1Test1$SquaredResiduals = obj1Test1$Residuals^2
mse = mean(obj1Test1$SquaredResiduals)
rmse1 = sqrt(mse)
rmseModel1 = rmseModel1+rmse1
obj1Test2$Predictions = predict(linearModel2, obj1Test2)
obj1Test2$Residuals = obj1Test2$Predictions - obj1Test2$Life.expectancy
obj1Test2$SquaredResiduals = obj1Test2$Residuals^2
mse = mean(obj1Test2$SquaredResiduals)
rmse2 = sqrt(mse)
rmseModel2 = rmseModel2+rmse2
#Get AIC
aicModel1 = aicModel1 + AIC(linearModel1)
aicModel2 = aicModel2 + AIC(linearModel2)
}
rmseModel1 = rmseModel1/modelIterations
rmseModel2 = rmseModel2/modelIterations
aicModel1 = aicModel1/modelIterations
aicModel2 = aicModel2/modelIterations
rmseModel1
rmseModel2
aicModel1
aicModel2
